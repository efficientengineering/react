version: 2.1

# aliases
alias: &tz
  TZ: /usr/share/zoneinfo/America/Los_Angeles

executors:
  rust-executor:
    docker:
      - image: cimg/rust:1.55.0
    working_directory: ~/project/compiler

commands:
  setup_node_modules:
    description: "Restore node_modules"
    steps:
      - restore_cache:
          name: Restore yarn cache
          keys:
            - v2-yarn_cache-{{ arch }}-{{ checksum "yarn.lock" }}
      - run:
          name: Install dependencies
          command: |
            yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
            if [ $? -ne 0 ]; then
              yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
            fi
          environment:
          # If we start needing the Electron binary, please ensure the binary is cached in CI following https://www.electronjs.org/docs/latest/tutorial/installation
            ELECTRON_SKIP_BINARY_DOWNLOAD: 1
      - save_cache:
          name: Save yarn cache
          key: v2-yarn_cache-{{ arch }}-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

# The CircleCI API doesn't yet support triggering a specific workflow, but it
# does support triggering a pipeline. So as a workaround you can triggger the
# entire pipeline and use parameters to disable everything except the workflow
# you want. CircleCI recommends this workaround here:
# https://support.circleci.com/hc/en-us/articles/360050351292-How-to-trigger-a-workflow-via-CircleCI-API-v2-
parameters:
  # This is only set when triggering the CI pipeline via an API request.
  prerelease_commit_sha:
    type: string
    default: ''

jobs:
# compiler_playground_cloud Jobs
  test_playground_cloud:
    docker:
      - image: cimg/node:18.20.1-browsers
    working_directory: ~/project/compiler
    resource_class: large
    environment: *tz
    steps:
      - checkout:
          path: ~/project
      - setup_node_modules
      - run: npx playwright install --with-deps chromium
      - run: yarn workspace playground test
  
# compiler_rust Jobs
  rust_build_cloud:
      docker:
        - image: cimg/rust:1.80.0
      working_directory: ~/project/compiler
      resource_class: large
      environment:
        <<: *tz
        CARGO_TERM_COLOR: always
        RUSTFLAGS: -Dwarnings
      steps:
        - checkout:
            path: ~/project
        - run:
            name: Install libicu-dev
            command: sudo apt-get update && sudo apt-get install -y libicu-dev
        - restore_cache:
            keys:
              - cargo-cache-{{ checksum "Cargo.lock" }}
        - run:
            name: cargo build
            command: cargo build --release
        - save_cache:
            key: cargo-cache-{{ checksum "Cargo.lock" }}
            paths:
              - ~/.cargo/registry
              - target

  rust_test_cloud:
    docker:
      - image: cimg/rust:1.80.0
    working_directory: ~/project/compiler
    resource_class: large
    environment:
      <<: *tz
      CARGO_TERM_COLOR: always
      RUSTFLAGS: -Dwarnings

    steps:
      - checkout:
          path: ~/project
      - run:
          name: Install libicu-dev
          command: sudo apt-get update && sudo apt-get install -y libicu-dev
      - restore_cache:
          keys:
            - cargo-cache-{{ checksum "Cargo.lock" }}
      - run:
          name: cargo test
          command: cargo test --manifest-path=Cargo.toml --locked
  
  rust_lint_cloud:
    docker:
      - image: cimg/rust:1.80.0
    working_directory: ~/project/compiler
    resource_class: large
    environment:
      <<: *tz
      CARGO_TERM_COLOR: always
      RUSTFLAGS: -Dwarnings
    steps:
      - checkout:
          path: ~/project
      - restore_cache:
          keys:
            - cargo-cache-{{ checksum "Cargo.lock" }}
      - run:
          name: Install Rust nightly
          command: rustup install nightly && rustup override set nightly
      - run:
          name: rustfmt
          command: grep -r --include "*.rs" --files-without-match "@generated" crates | xargs rustup run nightly-2023-08-01 rustfmt --check --config="skip_children=true"

# compiler_typescript Jobs
  typescript_lint_cloud:
    docker:
      - image: cimg/node:18.20.1-browsers
    working_directory: ~/project/compiler
    resource_class: large
    environment: *tz
    steps:
      - checkout:
          path: ~/project
      - setup_node_modules
      - run: yarn workspace babel-plugin-react-compiler lint
  
  typescript_jest_cloud:
    docker:
      - image: cimg/node:18.20.1-browsers
    working_directory: ~/project/compiler
    resource_class: large
    environment: *tz
    steps:
      - checkout:
          path: ~/project
      - setup_node_modules
      - run: yarn workspace babel-plugin-react-compiler jest
  
  typescript_test_cloud:
    docker:
      - image: cimg/node:18.20.1-browsers
    working_directory: ~/project/compiler
    resource_class: large
    environment: *tz
    parameters:
      workspace_name:
        type: string
        default: ""
    steps:
      - checkout:
          path: ~/project
      - setup_node_modules
      - run: yarn workspace << parameters.workspace_name >> test

# test_fuzz Jobs
  test_fuzz_cloud:
    docker:
      - image: cimg/node:18.20.1-browsers
    resource_class: large
    environment: *tz
    steps:
      - checkout
      - setup_node_modules
      - run: |
         FUZZ_TEST_SEED=$RANDOM yarn test fuzz --ci=circleci
         FUZZ_TEST_SEED=$RANDOM yarn test --prod fuzz --ci=circleci

# shared_lint Jobs
  prettier_cloud:
    docker:
      - image: cimg/node:18.20.1-browsers
    resource_class: large
    environment: *tz
    steps:
      - checkout
      - setup_node_modules
      - run: yarn prettier-check
  
  eslint_cloud:
    docker:
      - image: cimg/node:18.20.1-browsers
    resource_class: large
    environment: *tz
    steps:
      - checkout
      - setup_node_modules
      - run: node ./scripts/tasks/eslint
  
  check_license_cloud:
    docker:
      - image: cimg/node:18.20.1-browsers
    resource_class: large
    environment: *tz
    steps:
      - checkout
      - setup_node_modules
      - run: ./scripts/ci/check_license.sh
  
  test_print_warnings_cloud:
    docker:
      - image: cimg/node:18.20.1-browsers
    resource_class: large
    environment: *tz
    steps:
      - checkout
      - setup_node_modules
      - run: ./scripts/ci/test_print_warnings.sh

# runtime_build_and_test Jobs
  flow_cloud:
    docker:
      - image: cimg/node:18.20.1-browsers
    resource_class: large
    environment: *tz
    parameters:
      flow_inline_config_shortname:
        type: string
        default: ""
    steps:
      - checkout
      - setup_node_modules
      - run: node ./scripts/tasks/flow-ci << parameters.flow_inline_config_shortname >> 
  
  check_generated_fizz_runtime_cloud:
    docker:
      - image: cimg/node:18.20.1-browsers
    resource_class: large
    environment: *tz
    steps:
      - checkout
      - setup_node_modules
      - run: |
          yarn generate-inline-fizz-runtime
          git diff --quiet || (echo "There was a change to the Fizz runtime. Run `yarn generate-inline-fizz-runtime` and check in the result." && false)

  flags_cloud:
    docker:
      - image: cimg/node:18.20.1-browsers
    resource_class: large
    environment: *tz
    steps:
      - checkout
      - setup_node_modules
      - run: yarn flags
  
  yarn_test_cloud:
    docker:
      - image: cimg/node:18.20.1-browsers
    resource_class: 2xlarge
    environment: *tz
    parameters:
      params: 
        type: string
        default: ""
      shard:
        type: string
        default: ""
    steps:
      - checkout
      - setup_node_modules
      - run: | 
          yarn test << parameters.params >> --ci=circleci --shard=<< parameters.shard >>
  
  build_and_lint_cloud:
    docker:
      - image: cimg/node:18.20.1-browsers
    resource_class: large
    environment: *tz
    parameters:
      worker_id:
        type: integer
        default: 0
      release_channel:
        type: string
        default: ""
    steps:
      - checkout
      - setup_node_modules
      - run: 
          command: yarn build --index=<< parameters.worker_id >> --total=20 --r=<< parameters.release_channel >> --ci=circleci
          environment:
            CI: circleci
            RELEASE_CHANNEL: << parameters.release_channel >>
            NODE_INDEX: << parameters.worker_id >>
      - run: yarn lint-build
      - run: ls -R build
      - run: |
              mkdir -p /tmp/artifacts/_build_<< parameters.worker_id >>_<< parameters.release_channel >>
              cp -R build/* /tmp/artifacts/_build_<< parameters.worker_id >>_<< parameters.release_channel >>
      - persist_to_workspace:
          root: /tmp/artifacts
          paths:
            - _build_<< parameters.worker_id >>_<< parameters.release_channel >>
  
  test_build_cloud:
    docker:
      - image: cimg/node:18.20.1-browsers
    resource_class: xlarge
    environment: *tz
    parameters:
      test_params:
        type: string
        default: ""
      shard:
        type: string
        default: ""
    steps:
      - checkout
      - setup_node_modules
      - attach_workspace:
          at: /tmp/artifacts
      - run: ls -R /tmp/artifacts
      - run: yarn test --build=<< parameters.test_params >> --shard=<< parameters.shard >> --ci=circleci
  
  run_fixtures_flight_tests_cloud:
    docker:
      - image: cimg/node:18.20.1-browsers
    resource_class: large
    environment: *tz
    steps: 
      - checkout
      - attach_workspace:
          at: build
      - run: 
          name: Display structure of build
          command: ls -R build
      - run: 
          name: Install fixture dependencies
          working-directory: fixtures/flight
          command: |
            yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
            if [ $? -ne 0 ]; then
              yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
            fi
      - run:
          name: Playwright install deps
          working-directory: fixtures/flight
          command: |
            npx playwright install
            sudo npx playwright install-deps
      - run:
          name: Run tests
          working-directory: fixtures/flight
          command: yarn test
          environment:
            DEBUG: pw:webserver
      - store_artifacts:
          path: fixtures/flight/playwright-report
          destination: flight-playwright-report
      - store_artifacts:
          path: fixtures/flight/test-results
          destination: flight-test-results


workflows:

  compiler_playground_cloud:
    jobs:
      - test_playground_cloud
  
  compiler_rust_cloud:
    jobs:
      - rust_build_cloud
      - rust_test_cloud:
          requires:
            - rust_build_cloud
      - rust_lint_cloud:
          requires:
            - rust_build_cloud
  
  compiler_typescript_cloud:
    jobs:
     - typescript_lint_cloud
     - typescript_jest_cloud
     - typescript_test_cloud:
          # Need to generate via dynamic config
          matrix:
            parameters:
              workspace_name: 
                - babel-plugin-react-compiler
                - eslint-plugin-react-compiler
                - make-read-only-util
                - react-compiler-healthcheck
                - react-compiler-runtime
                - snap

  test_fuzz_cloud:
    jobs:
      - test_fuzz_cloud

  shared_lint_cloud:
    jobs:
      - prettier_cloud
      - eslint_cloud
      - check_license_cloud
      - test_print_warnings_cloud
  
  runtime_build_and_test_cloud:
    jobs:
      - flow_cloud:
          # Need to generate via dynamic config
          matrix:
            parameters: 
              flow_inline_config_shortname:
                - dom-node
                - dom-node-webpack
                - dom-node-turbopack
                - dom-node-turbopack-bundled
                - dom-bun
                - dom-browser
                - dom-browser-esm
                - dom-browser-turbopack
                - dom-edge-webpack
                - dom-edge-turbopack
                - dom-node-esm
                - dom-legacy
                - markup
                - dom-fb
                - native
                - fabric
                - test
                - art
                - custom
      - check_generated_fizz_runtime_cloud
      - flags_cloud
      - yarn_test_cloud:
          name: "yarn_test_cloud-<< matrix.params >>-<< matrix.shard >>"
          matrix:
            parameters:
              params:
                - "-r=stable --env=development"
                - "-r=stable --env=production"
                - "-r=experimental --env=development"
                - "-r=experimental --env=production"
                - "-r=www-classic --env=development --variant=false"
                - "-r=www-classic --env=production --variant=false"
                - "-r=www-classic --env=development --variant=true"
                - "-r=www-classic --env=production --variant=true"
                - "-r=www-modern --env=development --variant=false"
                - "-r=www-modern --env=production --variant=false"
                - "-r=www-modern --env=development --variant=true"
                - "-r=www-modern --env=production --variant=true"
                - "-r=xplat --env=development --variant=false"
                - "-r=xplat --env=development --variant=true"
                - "-r=xplat --env=production --variant=false"
                - "-r=xplat --env=production --variant=true"
                - "-r=stable --env=development --persistent"
                - "-r=experimental --env=development --persistent"
              shard:
                - 1/5
                - 2/5
                - 3/5
                - 4/5
                - 5/5
      - build_and_lint_cloud:
          name: "build_and_lint_cloud-<< matrix.worker_id >>-<< matrix.release_channel >>"
          matrix:
            parameters:
              worker_id: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]
              release_channel: [stable, experimental]
      - test_build_cloud:
          name: "test_build_cloud-<< matrix.test_params >>-<< matrix.shard >>"
          requires:
            - build_and_lint_cloud
          matrix:
            parameters:
              test_params:
                - "-r=stable --env=development"
                - "-r=stable --env=production"
                - "-r=experimental --env=development"
                - "-r=experimental --env=production"
                - "--project=devtools -r=experimental"
              shard:
                - 1/3
                - 2/3
                - 3/3
      - run_fixtures_flight_tests_cloud:
          requires:
            - build_and_lint_cloud